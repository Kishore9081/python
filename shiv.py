{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 1  2  3 \n",
      " 5  6  0 \n",
      " 7  8  4 \n",
      "\n",
      " 1  2  3 \n",
      " 5  0  6 \n",
      " 7  8  4 \n",
      "\n",
      " 1  2  3 \n",
      " 5  8  6 \n",
      " 7  0  4 \n",
      "\n",
      " 1  2  3 \n",
      " 5  8  6 \n",
      " 0  7  4 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "import copy\n",
    "from heapq import heappush, heappop\n",
    "\n",
    "n = 3\n",
    "row = [1, 0, -1, 0]\n",
    "col = [0, -1, 0, 1]\n",
    "\n",
    "class PriorityQueue:\n",
    "    def __init__(self):\n",
    "        self.heap = []\n",
    "\n",
    "    def push(self, k):\n",
    "        heappush(self.heap, k)\n",
    "\n",
    "    def pop(self):\n",
    "        return heappop(self.heap)\n",
    "\n",
    "    def empty(self):\n",
    "        return len(self.heap) == 0\n",
    "\n",
    "class Node:\n",
    "    def __init__(self, parent, mat, empty_tile_pos, cost, level):\n",
    "        self.parent = parent\n",
    "        self.mat = mat\n",
    "        self.empty_tile_pos = empty_tile_pos\n",
    "        self.cost = cost\n",
    "        self.level = level\n",
    "\n",
    "    def __lt__(self, nxt):\n",
    "        return self.cost < nxt.cost\n",
    "\n",
    "    \n",
    "    def calculateCost(mat, final):\n",
    "        count = 0\n",
    "        for i in range(n):\n",
    "            for j in range(n):\n",
    "                if mat[i][j] != 0 and mat[i][j] != final[i][j]:\n",
    "                    count += 1\n",
    "        return count\n",
    "\n",
    "    \n",
    "    def newNode(mat, empty_tile_pos, new_empty_tile_pos, level, parent, final):\n",
    "        new_mat = copy.deepcopy(mat)\n",
    "        x1, y1 = empty_tile_pos\n",
    "        x2, y2 = new_empty_tile_pos\n",
    "        new_mat[x1][y1], new_mat[x2][y2] = new_mat[x2][y2], new_mat[x1][y1]\n",
    "        cost = Node.calculateCost(new_mat, final)\n",
    "        return Node(parent, new_mat, new_empty_tile_pos, cost, level)\n",
    "\n",
    "    def printMatrix(mat):\n",
    "        for i in range(n):\n",
    "            for j in range(n):\n",
    "                print(f\"{mat[i][j]:2}\", end=\" \")\n",
    "            print()\n",
    "\n",
    "    \n",
    "    def isSafe(x, y):\n",
    "        return 0 <= x < n and 0 <= y < n\n",
    "\n",
    "    \n",
    "    def printPath(root):\n",
    "        if root is None:\n",
    "            return\n",
    "        Node.printPath(root.parent)\n",
    "        Node.printMatrix(root.mat)\n",
    "        print()\n",
    "\n",
    "    def solve(initial, empty_tile_pos, final):\n",
    "        pq = PriorityQueue()\n",
    "        cost = Node.calculateCost(initial, final)\n",
    "        root = Node(None, initial, empty_tile_pos, cost, 0)\n",
    "        pq.push(root)\n",
    "        visited = set()\n",
    "        visited.add(tuple(map(tuple, initial)))\n",
    "\n",
    "        while not pq.empty():\n",
    "            minimum = pq.pop()\n",
    "            if minimum.cost == 0:\n",
    "                Node.printPath(minimum)\n",
    "                return\n",
    "            for i in range(4):\n",
    "                new_tile_pos = [minimum.empty_tile_pos[0] + row[i], minimum.empty_tile_pos[1] + col[i]]\n",
    "                if Node.isSafe(new_tile_pos[0], new_tile_pos[1]):\n",
    "                    child = Node.newNode(minimum.mat, minimum.empty_tile_pos, new_tile_pos, minimum.level + 1, minimum, final)\n",
    "                    if tuple(map(tuple, child.mat)) not in visited:\n",
    "                        visited.add(tuple(map(tuple, child.mat)))\n",
    "                        pq.push(child)\n",
    "\n",
    "initial = [[1, 2, 3], [5, 6, 0], [7, 8, 4]]\n",
    "final = [[1, 2, 3], [5, 8, 6], [0, 7, 4]]\n",
    "empty_tile_pos = [1, 2]\n",
    "Node.solve(initial, empty_tile_pos, final)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
